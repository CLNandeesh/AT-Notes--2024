->Non Functional testing
	Performance testing

->Bottleneck
Defects are referred as Bottleneck in PT
Cause for the deviation in the requirement.
Ex: Login should take 2sec but its taking 6 sec. The reason for this slowness is the Bottleneck.

->Why Perf testing
To maintain quality of the Application , make sure application runs faster.
As load[# users] increases on the AUT, Perf of the application may deteriorates.

->NFR
Non functional requirements to perform Perf Testing

->What is Perf Testing
Concurrent users: # users using application at same point of time
Applying load on AUT and check the behaviour of the application wrt response time.
# users count will be given by client as part of NFR
These users are called Vusers: Machine generated users

->PT Tools
Load Runner
Performance center
Jmeter
NewLoad
SilkPerformer
Webload
OATS

->Types of Users
User base: Total number of users who can access the Application
Application Users/Concurrent Users: Total number of users using[transaction or think time] system at specific point of time. 
Simultaneous users:  Total number of users performing same operation at specific point of time. 

Ex:
UB:100 Users
CU:20 using login/10 using payment/10 Waiting/25 Searching the product = 70 users using the application 
SU:25 Searching the product at same time 

->Install Load Runner
Mercury came out Load runner from 1993 till 2016, now acquired by HP at 2004, Micro focus acquired from HP 
Install Load runner
 Vugen
 Controller
 Analysis

->Software Architecture
Hw+Sw
To identify the reason for bottleneck, we need to aware of the architecture.

->Server
Processor+Memory[RAM]+Harddisk
Software which understand and process the client request
Place where our application is hosted

File server: Process request related to files 
Database Server: Process request related to data
Application Server[App server]: Process request related to the application. Ex: Need to login to FB, Need to delete post in twitter.

Presentation layer[UI]
Business layer[Backend]
Data layer[DB]

Desktop App: Thin client [2 Tier Arch/Client Server]
Web App: Thick client [2 Tier Arch/Client Server]

3 Tier Arch [UI Layer+ Business logic Layer[App Server]+Data Layer] All 3 in different machine

Web Application N Tier Architecture:
it can have any number of app servers
Client<->Webserver<->App Server<->DB Server

->Transaction
Each request sent from Client to Server
Any request sent to Server is known as transaction
Note: UI level actions are not transaction, ex: entering UN is not transaction. Enter un,pw and Click on Login button , a request is sent to Server to perform login this is considered as Transaction
Ex: Launch Page transaction, Login transaction, Logout Transaction

->Response Time or E to E Transaction response time
Time taken for the complete request to be processed by Server and sends back response to Client.
Client---request->Server
Server--response-->Client 

->Internet: between client and server
  Intranet: between web, app and db server

->Request processing
If App server takes more time to process the request then we may need to increase the count of App server. [Scale Up]
Inc App/Web server/ DB server count: Scale up
Dec App/Web server/ DB server count: Scale down

Client/1 to N Web server/1 to N App server/1 to N DB server

->Difference between Web server and App server
Client send request to Web server, if the request is for static content then Web server responds to it, if request has business logic or any dynamic content then it sends to App server to process the request.

Key Differences

Purpose:
Web Server: Primarily serves static content and handles HTTP requests.
Application Server: Executes business logic and serves dynamic content, providing additional services for enterprise applications.
Content Served:
Web Server: Static content (HTML, CSS, images).
Application Server: Dynamic content generated by server-side applications.

Services Provided:
Web Server: Basic request handling and load balancing.
Application Server: Advanced services like transaction management, messaging, and middleware integration.

Examples:
Web Server: Apache HTTP Server, Nginx, IIS.
Application Server: Apache Tomcat, JBoss (WildFly), IBM WebSphere, Oracle WebLogic.

Conclusion
While both web servers and application servers are crucial components of web infrastructure, they serve different purposes. A web server focuses on delivering static content quickly and efficiently, whereas an application server is designed to execute complex business logic and generate dynamic content. In many modern architectures, these roles can overlap, with servers like Apache Tomcat acting as both a web server and an application server.


->Load balancing

c1   L  WS1    AS1
     O
c2   A                       DB Server
     D  WS2
c3
     B         AS2
.    A
.    L
.    A  WS3
     N
     C
     E
     R
LB checks which server is free and has less load and allocate request to that specific server to handles the request.

->Three tier architecture

Client<-->WebApp Servers[Tomcat, JBoss, Weblogic, Websphere, IS..]<-->DB Server

->User load
New App: Client specify
Old App: Splunk logs

->Host machine: Where WebApp server[Tomcat,JBoss,...] / DB server [Oracle, DB2,..]is installed.Both can be in single host machine or it can in different host machine.
One HM has WebApp server and other HM has DB server.
OS: Redhat Linux, Solaris, HP-UX,...

->Performance tuning
Client-internet time->WebApp Server--intranet time->DB Server
                        5 sec to                      20 sec to 
                    process request                process request
                   |---------Response time--------------------|

Time taken can be in WebApp server or Db server, need to check on these two if there is more response time

Performance Tuning: Fixing bottle neck either in WebApp server or Db server or in whole system.

->Protocol
Set of rules to be followed by client to connect with server.
http/https/ftp/smtp/,...

->What is an PT
Testing application for speed[quick response time under concurrent load ex 1000 users], stability[longer duration with same performance Ex:8hrs/70% max load], scalability[increasing the load/future load/50% increase in user load in next 1 year] in production like environment under vuser load to meet NFR

->Definitions
Throughput: # Transaction per seconds
Response Time: Time taken by system to respond for a specific request [client <->Server], Taken by System.
Think time: Waiting time between two transactions, 10 sec is the industry std think time, it will be different for different users. Taken by User.
Transaction response time: Same as Response time [client <->Server]

->PTLC: Performance testing Life Cycle
NFR Gathering and Analysis 15 days
 Test Lead or Manager collects the requirement from client and document it.
 OP:NFR

Test Strategy/Planning 15 days
 Test Manager and Test Lead 15 days
 Document to be prepared, reviewed and sign on.
 OP: Test Plan

Test Design and Development 1 month
 Performance Test Specialist
 Create Perf Test scripts
 Multiple scripts will be created based on the critical scenarios
 OP: Test Scripts

Test Execution 15 days
 OP: Test Results

Test Result Analysis 15 days
 Compare with benchmark result
 Find if bottleneck exist and do analysis on the reason for the bottleneck 
 Bottleneck can be in :Program written by Developer, WebApp Server, Processor, Memory, DB Server, Queries,....
 Find issue exist, if yes where
 After fixing, Re Execution wil happen
 OP: Test Reports

Bottleneck Analysis
 If Bottle neck exists
 Find if bottleneck exist and do analysis on the reason for the bottleneck 
 Bottleneck can be in :Program written by Developer, WebApp Server, Processor, Memory, DB Server, Queries,....
 Find issue exist, if yes where
 After fixing, Re Execution will happen


->When Perf Testing Start
 SDLC Requirement Analysis phase itself PTLC will starts or Dev phase it will start

->Types of Perf test
Load-speed
Stress
Endurance/Soak-Stability
Scalability-

->NFR Gathering
Prod and Perf test env infrastructure details of both hardware and software.[WebApp server details, DB server details, LB details[OS, RAM, Processor speed]

Transaction details
 Critical business scenarios/High load business scenarios/Frequently used scenarios
 Ex: Ticket booking in IRTC

Scalability related data

Work load related data
 Application usage pattern and volumes on business critical scenarios
 Given by Client or Logs
 Ex: login scenario/high volume/700 tph[transaction per hour]
     open or close fd/business critical/30tph
     Statement for last 5 years/High resource intensive/10tph

Peak hour details for all the scenarios and tph to be achieved details

Expected Response time in seconds details for all the transactions[SLA]
Ex:
simple trs 2 sec Ex: login, navigation from one to other screen etc
medium trs 5 sec Ex: create account
complex trs 8 sec Ex: retrieve 100 records

Database related details, Sensitive related info,...[Masking to be done]

->Load Runner Suite
Vugen [Virtual user generator]
  Test script generation
Controller
  Test script execution
Analysis
  Test result analysis
Agent[Load generator/Agent machine/Load injector]
 Runs in background can able to see

By default LoadRunner agent process .exe will be running in background process

->Vugen [Virtual user generator]
Used to create the Test script 
Single user execution 
Record and create the script
Records the events between client and server on the network level[socket level] when an user perform any action with the server
Load test in run for 1 hour to access the performance of the application. 

->Controller
Used to execute the script
Simultaneous and Concurrent user execution 
No of Scripts/No of Users to be executed is controlled by Controller
Need to do Test run or dry run or shakeout test before running actual perf test to validate any env issue, data issue, LG issue, issue in script

->Load runner Architecture

Vugen:
Creates two scripts and gives to Controller for WFM
Check mail
Compose mail

Controller:
Performs work force modeling based on client requirement and starts the execution.

Scenario 1->
            Group 1->Check mail   LG1  400 Users
            Group ->Compose mail  LG2  600 Users

LG/Load Injector/Agent machine
In background LG/Load Injector/Agent machine downloads the scripts and start running these scripts on the AUT
After running these scripts, LG will send result back to Controller, Controller now collates the result given by LG and send to Analysis for analysis.

Analysis
Client can start analyse the result given by Controller.

Vugen[Script creation]->Controller[WFM]->LG[Execution]->Controller[Collate the result]->Analysis[Analyze the results]

Note: 
Same LG can execute many groups or different LG can be used to execute different group, based on capacity of LG
One script have n number of transactions.
One scenario will have 1 to N groups
1 Groups will have one to N Scripts

->LR components installation
Vugen and Analysis will be installed in Perf tester machine
Controller will be installed in separate machine M1
LG will be installed in separate machine M2[LG1],M3[LG2],...
Connection between Controller and LG should be made[M1 to M2,M3,..]

Same Controller will be sued by multiple Tester working in the project by booking slots. PT1 9am to 10 am, PT2 10 to 11 am,..

->LG Machine calculation
Memory footprint, its depends on protocol

Ex 1:
Http protocol needs 2.3 mb of RAM for one user
To run 1000 users we need how many LG ?
If processor has 500mb memory 
500/2.3=217 approx. user load we can run on single lg machine
Approx 5 LG needed t run 1000 user load


Ex 2: 
Need to execute SAP protocol script
SAP protocol [memory footprint] needs 10mb per user
2gb memory / 3.2 g HZ processor
To run 1200 users how many LG needed

2*1024/10=/10=204 Approx
To run 1200 users we need Approx 6 LG

->LG connection to Controller
Through IP address we can able to connect LG to Controller
Controller>Scenarios>Load generators>Click ADD>Add name>Add OS details>OK>Click on connect. It should be ready

->Work Load modeling[WLM]
Find No Of Vusers/No of Iteration/Pacing to achieve required TPH

Think time: Time gap between transaction
Pacing: Time gap between Iterations

One Scenario->1 to N Groups->Each groups can have 1 to N LG->Each LG handles 1 to N VUsers OR one LG can be assigned to multiple groups

Script  LG            VUsers
Create  LG1, LG2  400 Vusers
Delete  LG3       100 Vusers

A  LG1 100 Vusers
B  LG1 100 Vusers
C  LG1 100 Vusers

Ex 1: WLM
Scenario ->Launch Think Time Login Think Time Logout =>Launch Scripts
Required
6 transactions per hour ie 6 Login should happen in one hour/need to run for 1 hour 
How many Vusers and how many iterations per Vusers required ?

Solution:
Run for 1 VUsers and find how much time it takes to execute one scenario Ex: takes 10 min for exe of Login scenario

Approach 1: 6 VUsers one iteration
Approach 2: 1 VUsers 6 iteration
Preferred Approach 2 since we need to reduce no of VUsers

Ex 2: WLM
Scenario ->Launch Think Time Login Think Time Logout =>Launch Scripts
Required
3 transactions per hour ie 6 Login should happen in one hour/need to run for 1 hour 
How many Vusers and how many iterations per Vusers required ?

Solution:
Run for 1 VUsers and find how much time it takes to execute one scenario Ex: takes 10 min for exe of Login scenario

Approach 1: 3 VUsers one iteration and idle for 30 min
Approach 2: 1 VUsers 3 iteration 10 min idle between each iteration[Pacing]
Preferred Approach 2 since we need to reduce no of VUsers
