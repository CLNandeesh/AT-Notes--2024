Selenium Hybrid Automation Framework
====================================
Objective of Framework
----------------------
->Modularity
->Maintenance
->Reusability

Types of Framework
------------------
Built In : 
->Test Ng, Junit, Cucumber, ...

Customized: 
->Built In + Additional API
->Data driver, Keyword driven, Hybrid framework

Phases/Stages
-------------
->Analysing AUT
   No of pages
   What are all the elements/How/Type
   What to Automate/What we cannot Automate

->Choose Test case for Automate
   100 Test cases: 90 feasible for automation, then all 90 can be automated so its 100% automation.
   Priority:
       P1:Sanity TC 
       P2:Data driven TC/ Re tests TC
       P3:Regression TC
       P4:Any other TC

->Design and Development of Framework
    Creating folder structure
    Implementing TC

->Execution
    Local execution and Remote execution[Selenium grid, Jenkins]

->Maintenance
   Git and GitHub 
  
Maintenance and Execution
    CI/CD: GitHub and Jenkins

AUT
---
Domain: 
  ECommerce 
    Online shopping application
    Ex: Amazon, Jio Mart, ...
 
URL: https://demo.opencart.com/admin/

Components
----------
Java: Programming language
Selenium: Automation framework
Test NG: Unit testing framework
Maven: Build tool
POM: Design pattern

POM
->Separate class for each page                            
->Object Identification and Actions

Test cases
->Validation

Test NG. xml
->TC execution configuration[Grouping, Parallel browser execution,..]

pom.xml
->Dependency
->Internally calls Testng.xml for execution

Utilities
->Frequent methods
->XL Utilities
->Data providers
->Extend report
->Screenshot 

Test Data
->Excel files

Resources
->Log4J
->Properties

Reports
->TestNG
->Extend Report

Logs
->Info, Debug, Warn
->Log4j

CI/CD
->Git, GitHub and Jenkins

Steps
-----
Step 1: Create maven project add dependency

Reporting:
extentreports

Logging:
log4j-slf4j-impl
log4j
log4j-core

Excel data:
poi-ooxml
poi

Common utility:
commons-lang3
commons-io

Unit testing:
testing

UI Automation:
selenium-java

Step 2:
->Create Project Structure

Step 3:
Create Base Page class:
->Create a BasePage class under pageobjects package
->Contains Constructor to initialize Web elements of all the Page Object classes.

public class BasePage {

    WebDriver driver;
    public BasePage(WebDriver driver) {
        this.driver = driver;
        PageFactory.initElements(driver, this);
    }

}

Create Page Object class:
->Create required Page Object Classes for all required pages and extends BasePage class under pageobjects package
->Add Constructor containing super() to call parent class constructor
->Identify Webelement using @FindBy annotation
->Add Action methods

public class HomePage extends BasePage {

    public HomePage(WebDriver driver) {
        super((driver));
    }

    @FindBy(xpath = "//span[text()='My Account']")
    WebElement lnkMyAccount;

    @FindBy(xpath = "//a[text()='Register']")
    WebElement lnkRegister;

    public void clickMyAccount() {
        lnkMyAccount.click();
    }

    public void clickRegister() {
        lnkRegister.click();
    }

}

Create Test case:
->Create Test case under testcases package and extends BaseClass



