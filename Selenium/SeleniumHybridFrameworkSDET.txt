Selenium Hybrid Automation Framework
====================================
Objective of Framework
----------------------
->Modularity
->Maintenance
->Reusability

*********************************************************************************************************************************************************
Types of Framework
------------------
Built In : 
->Test Ng, Junit, Cucumber, ...

Customized: 
->Built In + Additional API
->Data driver, Keyword driven, Hybrid framework

*********************************************************************************************************************************************************
Phases/Stages
-------------
->Analysing AUT
   No of pages
   What are all the elements/How/Type
   What to Automate/What we cannot Automate

->Choose Test case for Automate
   100 Test cases: 90 feasible for automation, then all 90 can be automated so its 100% automation.
   Priority:
       P1:Sanity TC 
       P2:Data driven TC/ Re tests TC
       P3:Regression TC
       P4:Any other TC

->Design and Development of Framework
    Creating folder structure
    Implementing TC

->Execution
    Local execution and Remote execution[Selenium grid, Jenkins]

->Maintenance
   Git and GitHub 
  
Maintenance and Execution
    CI/CD: GitHub and Jenkins

*********************************************************************************************************************************************************
AUT
---
Domain: 
  ECommerce 
    Online shopping application
    Ex: Amazon, Jio Mart, ...
 
URL: https://demo.opencart.com/admin/

*********************************************************************************************************************************************************
Components
----------
Java: Programming language
Selenium: Automation framework
Test NG: Unit testing framework
Maven: Build tool
POM: Design pattern

POM
->Separate class for each page                            
->Object Identification and Actions

Test cases
->Validation

Test NG. xml
->TC execution configuration[Grouping, Parallel browser execution,..]

pom.xml
->Dependency
->Internally calls Testng.xml for execution

Utilities
->Frequent methods
->XL Utilities
->Data providers
->Extend report
->Screenshot 

Test Data
->Excel files

Resources
->Log4J
->Properties

Reports
->TestNG
->Extend Report

Logs
->Info, Debug, Warn
->Log4j

CI/CD
->Git, GitHub and Jenkins

*********************************************************************************************************************************************************
Steps
-----
Step 1: Create maven project add dependency
-------------------------------------------

Reporting:
extentreports

Logging:
log4j-slf4j-impl
log4j
log4j-core

Excel data:
poi-ooxml
poi

Common utility:
commons-lang3
commons-io

Unit testing:
testing

UI Automation:
selenium-java

Step 2 Create Project Structure
--------------------------------

Step 3: Implementation of POC , Base Class and Test case class
--------------------------------------------------------------
3.1 Create Base Page class
--------------------------
->Create a BasePage class under pageobjects package
->Contains Constructor to initialize Web elements of all the Page Object classes.

public class BasePage {

    WebDriver driver;
    public BasePage(WebDriver driver) {
        this.driver = driver;
        PageFactory.initElements(driver, this);
    }

}

3.2 Create Page Object class
----------------------------
->Create required Page Object Classes for all required pages and extends BasePage class under pageobjects package
->Add Constructor containing super() to call parent class constructor
->Identify Webelement using @FindBy annotation
->Add Action methods

public class HomePage extends BasePage {

    public HomePage(WebDriver driver) {
        super((driver));
    }

    @FindBy(xpath = "//span[text()='My Account']")
    WebElement lnkMyAccount;

    @FindBy(xpath = "//a[text()='Register']")
    WebElement lnkRegister;

    public void clickMyAccount() {
        lnkMyAccount.click();
    }

    public void clickRegister() {
        lnkRegister.click();
    }

}

3.3 Create Test case
---------------------
->Create Test case under testcases package and extends BaseClass
->This class should contains methods to call POC action methods and to perform validations.

Ex:
public class TC01AccountRegistrationtest extends BaseClass{
    @Test
    void validateAccountRegistration() throws InterruptedException {

        HomePage homePage = new HomePage(driver);
        homePage.clickMyAccount();
        homePage.clickRegister();

        AccountRegistrationPage accountRegistrationPage = new AccountRegistrationPage(driver);
        accountRegistrationPage.setFirstName("nandeesh");
        accountRegistrationPage.setLastName("cl");
        accountRegistrationPage.setEmail("nandeesh@gmail.com");
        accountRegistrationPage.setPassword("Apjkalam!123");
        accountRegistrationPage.agreePolicy();
        accountRegistrationPage.clickContinue();
        String actualMessage = accountRegistrationPage.getConfirmationMessage();
        Assert.assertEquals(actualMessage, "Your Account Has Been Created!");
    }
}

3.4 Create Base Class under testbase package 
--------------------------------------------
->Keep all setup and teardown method
->All Test case class should extends this class

Ex:
public class BaseClass {
    public WebDriver driver;

    @BeforeClass
    void setup() throws InterruptedException {
        driver = new ChromeDriver();
        driver.manage().window().maximize();
        driver.manage().timeouts().implicitlyWait(Duration.ofSeconds(10));
        driver.get("https://demo.opencart.com/en-gb?route=account/register");
    }

    @AfterClass
    void tearDown() {
        driver.quit();
    }
}

Step 4:Adding Logs
------------------
->Log Levels
All<Trace<Debug<Info<Warn<Error<Fatal<Off

->Appenders- Where to generate logs [Console/File] 
->Loggers - What type of logs to generate[All<Trace<Debug<Info<Warn<Error<Fatal<Off]
Above two should be updated in log4j2.xml file

Steps:
->Add dependency
->Add log4j2.xml configuration file into src/test/resources folder
log4j2.xml
<?xml version="1.0" encoding="UTF-8"?>
<Configuration status="INFO">
    <Properties>
        <Property name="log-path">./logs</Property>
        <Property name="log-pattern">%d{yyyy-MM-dd HH:mm:ss} %-5p %c{1}:%L - %m%n</Property>
    </Properties>
    
    <Appenders>
        <Console name="Console" target="SYSTEM_OUT">
            <PatternLayout pattern="${log-pattern}"/>
        </Console>

        <RollingFile name="File" fileName="${log-path}/automation.log"
                     filePattern="${log-path}/automation-%d{MM-dd-yyyy}-%i.log.gz">
            <PatternLayout pattern="${log-pattern}"/>
            <Policies>
                <TimeBasedTriggeringPolicy/>
                <SizeBasedTriggeringPolicy size="1MB"/>
            </Policies>
            <DefaultRolloverStrategy max="10"/>
        </RollingFile>
    </Appenders>

    <Loggers>
        <Root level="INFO">
            <!--<AppenderRef ref="Console"/>-->
            <AppenderRef ref="File"/>
        </Root>
    </Loggers>
</Configuration>


//What type of Logs and COnsole or File log setting to be made here
    <Loggers>
        <Root level="INFO">    //what type of log level needed
            <!--<AppenderRef ref="Console"/>-->  //Do we need console logs
            <AppenderRef ref="File"/>            //Do we need file logs
        </Root>
    </Loggers>

//Location configurations
    <Properties>
        <Property name="log-path">./logs</Property>
        <Property name="log-pattern">%d{yyyy-MM-dd HH:mm:ss} %-5p %c{1}:%L - %m%n</Property>
    </Properties>

->Update BaseClass
->In setup() load Log4j xml file
public Logger logger;
logger = LogManager.getLogger(this.getClass());

->Add Log statements in required class
log.info()
log.debug()
log.error()

Packages:
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

Note: Loggers>Root level if we make Off then it wont generate any logs

Step 5: Run Tests on Desired browser/Cross browser/Parallel testing
-------------------------------------------------------------------
5.1: Desired browser testing

->Desired browser and Cross browser can be achieved by using <parameter> tag and @Parameters annotation
->Create testng.xml file and use Parameter tag to pass data
->Add required classes containing test methods
->Pass browser name and OS to Base Class setup() from testng.xml file

testing.xml file
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE suite SYSTEM "http://testng.org/testng-1.0.dtd">
<suite name="Practice Suite">
    <test name="Test Basics 1">
        <parameter name="os" value="windows"></parameter>
        <parameter name="browser" value="chrome"></parameter>
        <classes>
            <class name="testcases.TC01AccountRegistrationtest"/>
        </classes>
    </test> <!-- Test -->
</suite> <!-- Suite -->

Base class setup()
    @BeforeClass
    @Parameters({"os", "browser"})
    void setup(String osName, String browserName) throws InterruptedException {
        logger = LogManager.getLogger(this.getClass());

        switch (browserName.toLowerCase()) {
            case "chrome" -> driver = new ChromeDriver();
            case "firefox" -> driver = new FirefoxDriver();
            case "edge" -> driver = new EdgeDriver();
            default -> {
                System.out.println("Invalid Browser");
                return;
            }
        }
        driver.manage().window().maximize();
        driver.manage().timeouts().implicitlyWait(Duration.ofSeconds(10));
        driver.get("https://demo.opencart.com/en-gb?route=account/register");
    }

5.2: Cross Browser testing
->Configure Testng.xml file 

<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE suite SYSTEM "http://testng.org/testng-1.0.dtd">
<suite name="Practice Suite">
    <test name="chrometest">
        <parameter name="os" value="windows"></parameter>
        <parameter name="browser" value="chrome"></parameter>
        <classes>
            <class name="testcases.TC01AccountRegistrationtest"/>
        </classes>
    </test> <!-- Test -->

    <test name="firefoxtest">
        <parameter name="os" value="windows"></parameter>
        <parameter name="browser" value="firefox"></parameter>
        <classes>
            <class name="testcases.TC01AccountRegistrationtest"/>
        </classes>
    </test> <!-- Test -->
</suite> <!-- Suite -->

5.3: Parallel testing with Cross browser
->Add parallel="tests" attribute in Suite tag

<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE suite SYSTEM "http://testng.org/testng-1.0.dtd">
<suite name="Practice Suite" parallel="tests">
    <test name="chrometest">
        <parameter name="os" value="windows"></parameter>
        <parameter name="browser" value="chrome"></parameter>
        <classes>
            <class name="testcases.TC01AccountRegistrationtest"/>
        </classes>
    </test> <!-- Test -->

    <test name="firefoxtest">
        <parameter name="os" value="windows"></parameter>
        <parameter name="browser" value="firefox"></parameter>
        <classes>
            <class name="testcases.TC01AccountRegistrationtest"/>
        </classes>
    </test> <!-- Test -->
</suite> <!-- Suite -->

Step 6 Reading Common values from properties file
---------------------------------------------
->Add config.properties file under src/test/resources
->Update Base class setup() for loading config.properties file
->Get the value and use it using getProperty()

config.properties
registerAppURL=https://demo.opencart.com/en-gb?route=account/register\

Base Class

import java.util.Properties;

public class BaseClass {
    public Properties properties;


    @BeforeClass
    void setup() throws InterruptedException, IOException {
        //Properties file reading
        FileReader fileReader = new FileReader("./src//test//resources//config.properties");
        properties = new Properties();
        properties.load(fileReader);
        String registerUrl = properties.getProperty("registerAppURL");
        driver.get(registerUrl);
    }

}

Step 7 Datadriven Testing
-------------------------

