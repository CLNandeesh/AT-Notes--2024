Java Content
============
Variables and Data Types
Identifiers
Type Casting
Operator
Conditional Statements
Iterative Statements
Switch Statement
Number system
Naming Convention
Class and Object
JVM Memory
Methods

*****************************************************************************************************************************************************
Variables and Data Types
========================
->To Store data we use variables and to specify what type of data we are storing in the variables then we need to use Data types. 
->It is used for memory allocation. 

Types of Variables
------------------
Instance variable
->Declared outside method, block, constructor and inside the class.
->Has default value
->Can be accessed using reference variable

Local variable
->Declared inside method, block, constructor, loop.
->Not have default value, should be initialized before use.

Static variable
->Declared outside method, block, constructor and inside the class with keyword static.
->Has default value
->Can be accessed using reference variable and class name

*****************************************************************************************************************************************************
Primitive Data type
-------------------
->-2^(n-1) to 2^(n-1) -1
->If exceeds the range then Compiler will throw an error.
->Default data type for whole number, Java consider is int, If we are performing any operation on 2 or more numbers then the result data is by default is int data type.
->Default data type for float number, Java consider is double, If we are performing any operation on 2 or more numbers then the result data is by default is double data type.
->Bases on UTF, Unicode representation above memory representation.

byte
1 byte of memory is allocated
Default Value: 0
Ex:
byte b=22;

short
2 byte of memory is allocated
Default Value: 0
Ex:
short s=33;

char
2 bytes of memory is allocated
Ex: 
char c='A'; //A
char c=65; //A

int
4 bytes of memory is allocated
Default Value: 0
Ex:
int i=345;

long
8 bytes of memory is allocated
Default Value: 0
Ex: 
long l=3456l;
long l=12345L;

float
4 bytes of memory is allocated
Default Value: 0.0
7 digit precession
Ex:
float f=12.3f;
float f=23.44F;

double
8 bytes of memory is allocated
Default Value: 0.0
14 digit precession
Ex:
double f=12.3;
double f=23.44;

Boolean
1 bit of memory is allocated
Default Value: false
Ex:
Boolean

*****************************************************************************************************************************************************
Identifiers
===========
->Start with letters, _ and $
->Can contains letters, digits. _ and $
->No use of Keyword or Reserve words
->Give meaningful names

*****************************************************************************************************************************************************
Type Casting
============
->Converting data of one type to another type.
->Types
Implicit: Lower to Higher implicitly by JVM
Ex:
byte b=10;
int i=b;

Explicit: Higher to Lower explicitly by developer using cast operator
Ex:
int i=10;
byte b=(byte) i;

->Type checking: Compiler
  Type Casting: JVM

Type casting chart
byte->short->int->long->float->double
             ^
            char

*****************************************************************************************************************************************************
Operator
========
->Increment/Decrement operator
int a=5;
a=a+1;
OR
a=a++;

->a++: assign and increment 
  ++a: increment and assign

->Types of Operator
Arithmetic Operator:+ - * / %
Ex: 
-20%7=-6
10%30=10
10%-3=1

Relational Operator:> < >= <= == !=
 results Boolean value

Logical Operator: && || !
 Combines two or more relational operators


Shortcut Operator: & |

*****************************************************************************************************************************************************
Conditional Statements
======================
->if/if-else/if else-if else/ternary operator
->Condition can be simple relational operator or combination of Logical and relational operator
->Nested conditional are supported

if(condition)
{....}

if(condition)
{.....}
else
{.....}

if(condition)
{.....}
else if(condition)
{.....}
else
{......}

->Ternary operator
Syntax:
var = condition ? exp1 : exp2;
condition true, var=exp1 else var=exp2

Ex:
int a=(10>20)?10:20;
sop(a+" is big");

->exp can be another ternary operator

*****************************************************************************************************************************************************
Iterative Statements
====================
->for loop/while loop/do while loop

for(initialization; condition; increment or decrement)
{........}


initialization
while(condition)
{
......
increment or decrement
}


initialization
do
{
......
increment or decrement
}while(condition);

*****************************************************************************************************************************************************
Switch Statement
================
Syntax:
switch(exp)
{
case exp1:
statement;
break;

case exp1:
statement;
break;

default:
statement;

}

->exp can contains: byte, short, int, String
->exp1,2,3,.. should be constant or literals
->If we not add break then all below cases after satisfying condition will be executed.

Ex:
public class SwitchDemo {
    public static void main(String[] args) {
        int a = 40;

        switch (a) {
            case 10:
                System.out.println("Appu");
                break;

            case 20:
                System.out.println("Raghu");
                break;

            case 30:
                System.out.println("Shivu");
                break;

            default:
                System.out.println("Sharukh");
        }
    }
}

*****************************************************************************************************************************************************
Number system
=============
->Always output will be in decimal number format

->Octal
Prefix: O or o
Allowed: 0,1,...7

Ex:
int a=O45;
sop(a); //37

->Hexadecimal
Prefix: OX or ox
Allowed: 0,1,...9,A,B,C,D,E

Ex:
int a=OX45;
sop(a); //69

->Binary
Prefix: OB or ob
Allowed: 0,1

Ex:
int a=OB0100101;
sop(a); //37

*****************************************************************************************************************************************************
Naming Convention
=================
->Class, Interface, Enum names should start with uppercase and subsequent letter should starts with uppercase
->Package name should be lowercase
->Variables and Method names should be in Camel case.[start with small and subsequent letter should be in uppercase]
->Constant should be all in uppercase.
->No space allowed, can use _

*****************************************************************************************************************************************************
Class and Object
================
->Class is a Blueprint 
->Object is the instance of the Class
->reference variable contains reference value of the object and points to the created object.
->Creation of object is knows as Instantiation 

Class creation:
class className
{
constructors();
instance/static variables;
instance methods();
}

Object Creation:
className refVarName=new className();


->Exe flow
.java->COMPILER-->.class file-->JVM--->Output

Compile: Compiler during Compilation time
Execute: JVM during Runtime inside JRE

*****************************************************************************************************************************************************
JVM Memory
==========
->JVM exe inside JRE environment
->Method area/Stack area/Heap area/PC Register/Nature stack


new className();
->New memory will be created inside Heap area based on instance variable.
->Assign new value known as reference value for the object.
->Store Instance variable data, if not default value will be assigned.

Stack Area:
->When any method start to execute, stack trace for it will be created in stack area.
->Reference and Local variable will be stored in Stack area.

Heap Area:
->Memory for the Object will be allocated from heap area and it contains Instance and Static variable data.

*****************************************************************************************************************************************************
Methods
=======

accessModifiers returnType methodName(parameters)
{
..........
return value;
}






 
